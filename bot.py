from api_tokens import TG_API_TOKEN
from api_tokens import WEATHER_API_TOKEN
import telebot
from telebot import types
import requests
import json

bot = telebot.TeleBot(TG_API_TOKEN)

main_menu = ('–ü–æ–≥–æ–¥–∞ —Å–µ–π—á–∞—Å', '–ü–æ–≥–æ–¥–∞ –Ω–∞ –∑–∞–≤—Ç—Ä–∞', '–ü–æ–≥–æ–¥–∞ –Ω–∞ 5 –¥–Ω–µ–π', '–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å/–ü–æ–º–µ–Ω—è—Ç—å –≥–æ—Ä–æ–¥', 'üìë–ö–æ–Ω—Ç–∞–∫—Ç—ã', 'üí∏–ü–æ–¥–¥–µ—Ä–∂–∞—Ç—å')
donation_menu = ('ü´∞–Æ–º–∞–Ω–∏', 'üí∞–°–ë–ü', '‚Ü©Ô∏è–ù–∞–∑–∞–¥')
user_city = None

def keyboard(menu):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    for i in range(0, len(menu), 2):
        markup.add(*[types.KeyboardButton(item)
                      for item in menu[i:i+2]])
    return markup

@bot.message_handler(commands=['start'])
def start(message):
    username = message.from_user.username
    name = message.from_user.first_name
    bot.reply_to(message, 
                f'<i>–ü—Ä–∏–≤–µ—Ç,<b>{name} AKA {username}</b>!–Ø –±–æ—Ç-–ø–æ–≥–æ–¥–Ω–∏–∫, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –∞–∫—Ç—É–∞–ª—å–Ω—É—é –ø–æ–≥–æ–¥—É –Ω–∞–ø–∏—à–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–≤–æ–µ–≥–æ –≥–æ—Ä–æ–¥–∞!</i>', 
                reply_markup=keyboard(main_menu), parse_mode="html")

@bot.message_handler(content_types=['text'])
def get_information(message):
    global user_city
    if message.chat.type == 'private':
        if message.text == 'üìë–ö–æ–Ω—Ç–∞–∫—Ç—ã':
            bot.send_message(message.chat.id, '–£ –≤–∞—Å —á—Ç–æ-—Ç–æ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç?–ò–ª–∏ –µ—Å—Ç—å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –æ —Å–æ—Ç—Ä—É–¥–Ω–∏—á–µ—Å—Ç–≤–µ?–ù–∞–ø–∏—à–∏—Ç–µ –º–Ω–µ!')
            bot.send_message(message.chat.id, '–ì–æ–≥–æ–ª–µ–≤ –í–∏–∫—Ç–æ—Ä:nüì±Telegram: t.me/wa55upnüåê–í–∫–æ–Ω—Ç–∞–∫—Ç–µ: vk.com/yowa55upnüêôGitHub: github.com/paradaisen')
        elif message.text == 'üí∏–ü–æ–¥–¥–µ—Ä–∂–∞—Ç—å':
            bot.send_message(message.chat.id, 'üíµ–í—ã –º–æ–∂–µ—Ç–µ –ø–æ–¥–¥–µ—Ä–∂–∞—Ç—å –Ω–∞—à –ø—Ä–æ–µ–∫—Ç,–Ω–∞–∂–∞–≤ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ:', reply_markup=keyboard(donation_menu))
        elif message.text == 'ü´∞–Æ–º–∞–Ω–∏':
            bot.send_message(message.chat.id, 'ü´∞–í—ã –º–æ–∂–µ—Ç–µ –ø–æ–¥–¥–µ—Ä–∂–∞—Ç—å –Æ–º–∞–Ω–∏ –ø–æ —Å—Å—ã–ª–∫–µ:nhttps://yoomoney.ru/to/410013032669115')
        elif message.text == 'üí∞–°–ë–ü':
            bot.send_message(message.chat.id, 'üí∞–í—ã –º–æ–∂–µ—Ç–µ –ø–æ–¥–¥–µ—Ä–∂–∞—Ç—å C–ë–ü –ø–æ —Å—Å—ã–ª–∫–µ:')
        elif message.text == '‚Ü©Ô∏è–ù–∞–∑–∞–¥':
            bot.send_message(message.chat.id, '‚Ü©Ô∏è–í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –æ—Å–Ω–æ–≤–Ω–æ–º—É –º–µ–Ω—é', reply_markup=keyboard(main_menu))
        elif message.text == '–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å/–ü–æ–º–µ–Ω—è—Ç—å –≥–æ—Ä–æ–¥':
            bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞:', reply_markup=keyboard(main_menu))
            bot.register_next_step_handler(message, set_city)
        elif message.text == '–ü–æ–≥–æ–¥–∞ —Å–µ–π—á–∞—Å' and user_city:
            get_weather(message, user_city,0)
        elif message.text == '–ü–æ–≥–æ–¥–∞ –Ω–∞ –∑–∞–≤—Ç—Ä–∞' and user_city:
            get_weather(message, user_city,1)
        elif message.text == '–ü–æ–≥–æ–¥–∞ –Ω–∞ 5 –¥–Ω–µ–π' and user_city:
            get_weather(message, user_city,5)


        else:
            bot.send_message(message.chat.id, '–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å/–ü–æ–º–µ–Ω—è—Ç—å –≥–æ—Ä–æ–¥", —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥—ã', reply_markup=keyboard(main_menu))

def set_city(message):
    global user_city
    user_city = message.text
    data = get_weather_data(user_city)
    if data is None:
        bot.send_message(message.chat.id, f'–ì–æ—Ä–æ–¥–∞ <b>{user_city}</b> –Ω–µ—Ç –≤ –±–∞–∑–µ', parse_mode="html",reply_markup=keyboard(main_menu))
    else:
        bot.send_message(message.chat.id, f'–ì–æ—Ä–æ–¥ <b>{data["location"]["name"]},{data["location"]["region"]},{data["location"]["country"]}</b> —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!', parse_mode="html")
        bot.send_message(message.chat.id, '–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:', reply_markup=keyboard(main_menu))

def get_weather_data(city):
    uri = f'http://api.weatherapi.com/v1/forecast.json?days=5&hour=24&aqi=no&lang=ru&q={city}&key={WEATHER_API_TOKEN}'
    r = requests.get(uri)
    if r.status_code == 200:
        return json.loads(r.text)
    else:
        return None

def get_weather(message, city, count):
    data = get_weather_data(city)
    
    def format_weather_info(day_data, date_template, prefix):
        header = f'{prefix} <b>{data["location"]["name"]}</b>: <i>{day_data["day"]["condition"]["text"]}</i>\n'
        avg_temp = f'üå°–°—Ä–µ–¥–Ω—è—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –≤–æ–∑–¥—É—Ö–∞: <b>{day_data["day"]["avgtemp_c"]} ‚ÑÉ</b>\n'
        min_temp = f'üìâ–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: <b>{day_data["day"]["mintemp_c"]} ‚ÑÉ</b>\n'
        max_temp = f'üìà–ú–∞–∫—Å–º–∞–ª—å–Ω–∞—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: <b>{day_data["day"]["maxtemp_c"]} ‚ÑÉ</b>\n'
        max_wind = f'üí®–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å–∫–æ—Ä–æ—Å—Ç—å –≤–µ—Ç—Ä–∞: <b>{day_data["day"]["maxwind_kph"]} –∫–º/—á</b>\n'
        avg_vlaga = f'üí¶–í–ª–∞–∂–Ω–æ—Å—Ç—å: <b>{day_data["day"]["avghumidity"]} %</b>\n'
        rain_probability = f'üåß–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –¥–æ–∂–¥—è: <b>{day_data["day"]["daily_chance_of_rain"]} %</b>\n'
        sunrise = f'üåÖ–í–æ—Å—Ö–æ–¥: <b>{day_data["astro"]["sunrise"]}</b>\n'
        sunset = f'üåÜ–ó–∞–∫–∞—Ç: <b>{day_data["astro"]["sunset"]}</b>'
        
        return f'{header}{avg_temp}{min_temp}{max_temp}{max_wind}{avg_vlaga}{rain_probability}{sunrise}{sunset}'
    
    if count == 5:
        for i in range(count):
            date_template = data["forecast"]["forecastday"][i]["date"]
            prefix = f'–ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ {i+1} –¥–µ–Ω—å ({date_template}) –≤ '
            weather_info = format_weather_info(data["forecast"]["forecastday"][i], date_template, prefix)
            bot.send_message(message.chat.id, weather_info, parse_mode="html", reply_markup=keyboard(main_menu))
    else:
        date_template = data["forecast"]["forecastday"][count]["date"]
        if count == 0:
            prefix = f'–°–µ–≥–æ–¥–Ω—è ({date_template}) –≤ '
        elif count == 1:
            prefix = f'–ó–∞–≤—Ç—Ä–∞ ({date_template}) –≤ '
        
        weather_info = format_weather_info(data["forecast"]["forecastday"][count], date_template, prefix)
        bot.send_message(message.chat.id, weather_info, parse_mode="html", reply_markup=keyboard(main_menu))

    

bot.polling()

